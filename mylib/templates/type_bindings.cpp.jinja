#include "optix_types.h"
#include "mytypes.h"

#include <torch/extension.h>

PYBIND11_MODULE(types, m)
{
    {% for e in enums %}
    py::enum_<{{e.name}}>(m, "{{e.name}}")
        {% for v in e.values %}
        .value("{{v.name}}", {{v.name}})
        {% endfor %}
        .export_values();

    {% endfor %}

    {% for s in structs %}
    py::class_<{{s.name}}>(m, "{{s.name}}")
        .def(py::init<>())
        {% for f in s.fields %}

            {% if f.type.startswith('const')%}
            .def_property_readonly(
            {% else %}
            .def_property(
            {% endif %}
            "{{f.name}}", 
            [](const {{s.name}} &self)
                { return ({{f.py_type}})(self.{{f.name}}); }, 

            {% if not f.type.startswith('const')%}
            []({{s.name}} &self, {{f.py_type}} {{f.name}})
                { self.{{f.name}} = ({{f.type}}){{f.name}}; }, 
            {% endif %}
            py::return_value_policy::reference_internal)
        {% endfor %}
        ;
    {% endfor %}
}
