#include <optix_types.h>
#include <torch/extension.h>

template <class T>
class ptr_wrapper
{
public:
    ptr_wrapper() : ptr(nullptr) {}
    ptr_wrapper(T *ptr) : ptr(ptr) {}
    ptr_wrapper(const ptr_wrapper &other) : ptr(other.ptr) {}
    void ~ptr_wrapper() { delete ptr; }
    T &operator*() const { return *ptr; }
    T *operator->() const { return ptr; }
    T *get() const { return ptr; }
    T &operator[](std::size_t idx) const { return ptr[idx]; }

private:
    T *ptr;
};

PYBIND11_MODULE(c_pointers, m)
{
    py::class_<ptr_wrapper<OptixDeviceContext_t>>(m, "OptixDeviceContext")
        .def(py::init<>());
}